on:
  release:
    types: [created]
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  release-linux-amd64:
    name: release linux/amd64
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: wangyoucao577/go-release-action@v1
      id: go_build
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        goos: linux
        goarch: amd64
        compress_assets: false
        executable_compression: upx
        project_path: ./cmd/pbs_plus
    - name: pre-packaging script
      env:
        BINARY_PATH: ${{ steps.go_build.outputs.release_asset_dir }}
      run: ./build/package/pre-packaging.sh
    - id: new_ref 
      run: |
        new_ref="$GITHUB_REF"
        if [[ "$GITHUB_REF" == "refs/heads/main" || "$GITHUB_REF" == "refs/tags/main" ]]; then
            new_ref="refs/tags/v0.0.0"
        fi
        echo "new_ref=$new_ref" >> "$GITHUB_ENV"
    - uses: jiro4989/build-deb-action@v3
      with:
        package: ${{ github.event.repository.name }}
        package_root: build/package/debian
        maintainer: Son Roy Almerol <github@snry.me>
        version: ${{ env.new_ref }}
        arch: 'amd64'
        depends: 'proxmox-backup (>= 3.2), proxmox-backup-client (>= 3.2.5), rclone'
        desc: 'PBS Plus is a project focused on extending Proxmox Backup Server (PBS) with advanced features to create a more competitive backup solution'
        homepage: 'https://github.com/${{ github.repository }}'
    
    - name: Publish Release or Dev Pre-Release Assets
      if: github.event_name == 'release' || github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag: ${{ github.event.release.tag_name || 'main' }}
        files: ./*.deb
        prerelease: ${{ github.ref == 'refs/heads/main' || github.event.release.tag_name == 'main' }} # Set as pre-release if this is a dev build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-windows-amd64-agent:
    name: release agent windows/amd64
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: wangyoucao577/go-release-action@v1
      id: go_build
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        goos: windows
        goarch: amd64
        compress_assets: false
        executable_compression: upx
        binary_name: pbs-plus-agent
        project_path: ./cmd/windows_agent
        ldflags: -H=windowsgui
    - uses: actions/upload-artifact@v4
      if: github.event_name == 'release' && github.event.release.tag_name != 'main'
      with:
        name: windows-binary
        path: ${{ steps.go_build.outputs.release_asset_dir }}/pbs-plus-agent.exe

  release-windows-amd64-agent-installer:
    name: release agent installer windows/amd64
    runs-on: windows-latest
    if: github.event_name == 'release' && github.event.release.tag_name != 'main'
    needs: release-windows-amd64-agent
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: windows-binary
        path: ./build/package/windows/
    - id: version
      shell: pwsh
      run: |
        $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "version=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - env:
        MSI_NAME: "pbs-plus-agent-${{ github.event.release.tag_name }}-windows-installer.msi"
        VERSION: ${{ env.version }}
      shell: pwsh
      run: |
        choco install go-msi
        Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
        refreshenv
        $tempDir = Join-Path -Path $Env:GITHUB_WORKSPACE/build/package/windows -ChildPath "temp"
        New-Item -Path $tempDir -ItemType Directory -Force
        $env:TEMP = $tempDir 
        $env:TMP = $tempDir
        cd ./build/package/windows 
        go-msi make --msi $env:MSI_NAME --version $env:VERSION
    - name: Publish Release
      uses: softprops/action-gh-release@v1
      with:
        tag: ${{ github.event.release.tag_name }}
        files: ./build/package/windows/*.msi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
