#!/bin/bash
set -e

# Create dedicated user and group if they don't exist
if ! getent group pbsplus >/dev/null 2>&1; then
    groupadd -r pbsplus
fi

if ! getent passwd pbsplus >/dev/null 2>&1; then
    useradd -r -g pbsplus -s /sbin/nologin \
        -d /var/lib/pbs-plus-agent \
        -c "PBS Plus Agent" pbsplus
fi

# Set executable permissions
chmod +x /usr/bin/pbs-plus-agent
chmod +x /usr/bin/pbs-plus-updater

# Create necessary directories with proper ownership
mkdir -p /var/lib/pbs-plus-agent
mkdir -p /var/log/pbs-plus-agent
mkdir -p /run/pbs-plus-agent
mkdir -p /etc/pbs-plus-agent

# Set ownership and permissions
chown -R pbsplus:pbsplus /var/lib/pbs-plus-agent
chown -R pbsplus:pbsplus /var/log/pbs-plus-agent
chown -R pbsplus:pbsplus /run/pbs-plus-agent
chown -R pbsplus:pbsplus /etc/pbs-plus-agent

chmod 750 /var/lib/pbs-plus-agent
chmod 750 /var/log/pbs-plus-agent
chmod 755 /run/pbs-plus-agent
chmod 750 /etc/pbs-plus-agent

# Set binary ownership
chown root:pbsplus /usr/bin/pbs-plus-agent
chown root:pbsplus /usr/bin/pbs-plus-updater
chmod 755 /usr/bin/pbs-plus-agent
chmod 755 /usr/bin/pbs-plus-updater

# Add to RHEL-specific groups
rhel_groups=(
    "wheel" "disk" "adm" "sys" "tty" "tape" "dialout"
    "systemd-journal" "docker" "libvirt" "kvm" "qemu"
    "ssl-cert" "audio" "video" "games" "users"
)

for group in "${rhel_groups[@]}"; do
    if getent group "$group" >/dev/null 2>&1; then
        usermod -a -G "$group" pbsplus
        echo "Added pbsplus to group: $group"
    fi
done

# Enhanced capabilities including sys_rawio for block device access
setcap 'cap_dac_read_search,cap_dac_override,cap_fowner,cap_sys_admin,cap_sys_ptrace,cap_sys_rawio,cap_mknod+ep' /usr/bin/pbs-plus-agent
setcap 'cap_dac_read_search,cap_dac_override,cap_fowner,cap_setuid,cap_setgid,cap_sys_admin,cap_sys_ptrace,cap_sys_rawio,cap_mknod+ep' /usr/bin/pbs-plus-updater

# Set PAM limits
cat >> /etc/security/limits.conf << 'EOF'
pbsplus soft nofile 65536
pbsplus hard nofile 65536
pbsplus soft nproc 32768
pbsplus hard nproc 32768
pbsplus soft memlock unlimited
pbsplus hard memlock unlimited
EOF

# Handle SELinux
if command -v getenforce >/dev/null 2>&1 && [ "$(getenforce)" != "Disabled" ]; then
    echo "SELinux is enabled. Configuring SELinux policies..."
    
    # Set SELinux context for binaries
    if command -v semanage >/dev/null 2>&1; then
        semanage fcontext -a -t admin_home_exec_t "/usr/bin/pbs-plus-agent" 2>/dev/null || true
        semanage fcontext -a -t admin_home_exec_t "/usr/bin/pbs-plus-updater" 2>/dev/null || true
        restorecon -v /usr/bin/pbs-plus-agent /usr/bin/pbs-plus-updater
        
        # Allow the binaries to access all files (permissive for backup operations)
        setsebool -P allow_execstack on 2>/dev/null || true
        setsebool -P allow_execmem on 2>/dev/null || true
    fi
    
    # Create a simple SELinux policy module
    cat > /tmp/pbs-plus-agent.te << 'EOF'
module pbs-plus-agent 1.0;

require {
    type unconfined_t;
    class capability { dac_read_search dac_override fowner sys_admin sys_ptrace sys_rawio mknod };
    class file { read write create unlink getattr setattr open };
    class dir { read write create add_name remove_name getattr setattr search open };
}

# Allow all capabilities needed for backup operations
allow unconfined_t self:capability { dac_read_search dac_override fowner sys_admin sys_ptrace sys_rawio mknod };
EOF

    # Compile and install if tools are available
    if command -v checkmodule >/dev/null 2>&1; then
        cd /tmp
        checkmodule -M -m -o pbs-plus-agent.mod pbs-plus-agent.te 2>/dev/null || true
        if [ -f pbs-plus-agent.mod ]; then
            semodule_package -o pbs-plus-agent.pp -m pbs-plus-agent.mod 2>/dev/null || true
            if [ -f pbs-plus-agent.pp ]; then
                semodule -i pbs-plus-agent.pp 2>/dev/null || true
                echo "SELinux policy module installed"
            fi
        fi
        cd - >/dev/null
    fi
    
    echo "SELinux configuration complete. Monitor /var/log/audit/audit.log for denials."
else
    echo "SELinux is disabled or not present."
fi

# Enable systemd lingering
if command -v loginctl >/dev/null 2>&1; then
    loginctl enable-linger pbsplus 2>/dev/null || true
fi

# Configure firewall if needed
if systemctl is-active --quiet firewalld; then
    echo "Firewalld is active. You may need to configure firewall rules for backup traffic."
fi

# Verify capabilities were set correctly
echo "Verifying capabilities:"
getcap /usr/bin/pbs-plus-agent
getcap /usr/bin/pbs-plus-updater

# Show final group memberships
echo "pbsplus user is member of groups:"
groups pbsplus

systemctl daemon-reload

# Enable the services to start on boot
systemctl enable pbs-plus-agent.service
systemctl enable pbs-plus-updater.service

# Start the services
systemctl restart pbs-plus-agent.service
systemctl restart pbs-plus-updater.service

echo "Setup complete for RHEL-based system."
echo "Check service status with:"
echo "  systemctl status pbs-plus-agent.service"
echo "  systemctl status pbs-plus-updater.service"
echo ""
echo "Monitor SELinux denials with:"
echo "  tail -f /var/log/audit/audit.log | grep denied"
echo "  ausearch -m avc -ts recent"

exit 0
