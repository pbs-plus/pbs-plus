package vssfs

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BackupReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "job_id":
			z.JobId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "JobId")
				return
			}
		case "drive":
			z.Drive, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Drive")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z BackupReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "job_id"
	err = en.Append(0x82, 0xa6, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.JobId)
	if err != nil {
		err = msgp.WrapError(err, "JobId")
		return
	}
	// write "drive"
	err = en.Append(0xa5, 0x64, 0x72, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Drive)
	if err != nil {
		err = msgp.WrapError(err, "Drive")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BackupReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "job_id"
	o = append(o, 0x82, 0xa6, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.JobId)
	// string "drive"
	o = append(o, 0xa5, 0x64, 0x72, 0x69, 0x76, 0x65)
	o = msgp.AppendString(o, z.Drive)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BackupReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "job_id":
			z.JobId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "JobId")
				return
			}
		case "drive":
			z.Drive, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Drive")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BackupReq) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.JobId) + 6 + msgp.StringPrefixSize + len(z.Drive)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CloseReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "handleID":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "HandleID")
					return
				}
				z.HandleID = FileHandleId(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CloseReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "handleID"
	err = en.Append(0x81, 0xa8, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.HandleID))
	if err != nil {
		err = msgp.WrapError(err, "HandleID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CloseReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "handleID"
	o = append(o, 0x81, 0xa8, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x44)
	o = msgp.AppendString(o, string(z.HandleID))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CloseReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "handleID":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HandleID")
					return
				}
				z.HandleID = FileHandleId(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CloseReq) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(string(z.HandleID))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DataResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "eof":
			z.EOF, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "EOF")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DataResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "data"
	err = en.Append(0x82, 0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "eof"
	err = en.Append(0xa3, 0x65, 0x6f, 0x66)
	if err != nil {
		return
	}
	err = en.WriteBool(z.EOF)
	if err != nil {
		err = msgp.WrapError(err, "EOF")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DataResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "data"
	o = append(o, 0x82, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	// string "eof"
	o = append(o, 0xa3, 0x65, 0x6f, 0x66)
	o = msgp.AppendBool(o, z.EOF)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DataResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "eof":
			z.EOF, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EOF")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DataResponse) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len(z.Data) + 4 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FileHandleId) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FileHandleId(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FileHandleId) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FileHandleId) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FileHandleId) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FileHandleId(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FileHandleId) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OpenFileReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "path":
			z.Path, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "flag":
			z.Flag, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Flag")
				return
			}
		case "perm":
			z.Perm, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Perm")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z OpenFileReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "path"
	err = en.Append(0x83, 0xa4, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	// write "flag"
	err = en.Append(0xa4, 0x66, 0x6c, 0x61, 0x67)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Flag)
	if err != nil {
		err = msgp.WrapError(err, "Flag")
		return
	}
	// write "perm"
	err = en.Append(0xa4, 0x70, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Perm)
	if err != nil {
		err = msgp.WrapError(err, "Perm")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OpenFileReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "path"
	o = append(o, 0x83, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	// string "flag"
	o = append(o, 0xa4, 0x66, 0x6c, 0x61, 0x67)
	o = msgp.AppendInt(o, z.Flag)
	// string "perm"
	o = append(o, 0xa4, 0x70, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Perm)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OpenFileReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "flag":
			z.Flag, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Flag")
				return
			}
		case "perm":
			z.Perm, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Perm")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OpenFileReq) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Path) + 5 + msgp.IntSize + 5 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReadAtReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "handleID":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "HandleID")
					return
				}
				z.HandleID = FileHandleId(zb0002)
			}
		case "offset":
			z.Offset, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		case "length":
			z.Length, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Length")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ReadAtReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "handleID"
	err = en.Append(0x83, 0xa8, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.HandleID))
	if err != nil {
		err = msgp.WrapError(err, "HandleID")
		return
	}
	// write "offset"
	err = en.Append(0xa6, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Offset)
	if err != nil {
		err = msgp.WrapError(err, "Offset")
		return
	}
	// write "length"
	err = en.Append(0xa6, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Length)
	if err != nil {
		err = msgp.WrapError(err, "Length")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ReadAtReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "handleID"
	o = append(o, 0x83, 0xa8, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x44)
	o = msgp.AppendString(o, string(z.HandleID))
	// string "offset"
	o = append(o, 0xa6, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o = msgp.AppendInt64(o, z.Offset)
	// string "length"
	o = append(o, 0xa6, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	o = msgp.AppendInt(o, z.Length)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReadAtReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "handleID":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HandleID")
					return
				}
				z.HandleID = FileHandleId(zb0002)
			}
		case "offset":
			z.Offset, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		case "length":
			z.Length, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Length")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ReadAtReq) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(string(z.HandleID)) + 7 + msgp.Int64Size + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReadDirEntries) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(ReadDirEntries, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(VSSDirEntry)
			}
			var field []byte
			_ = field
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
				switch msgp.UnsafeString(field) {
				case "name":
					(*z)[zb0001].Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Name")
						return
					}
				case "mode":
					(*z)[zb0001].Mode, err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Mode")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, zb0001)
						return
					}
				}
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ReadDirEntries) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004 := range z {
		if z[zb0004] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "name"
			err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z[zb0004].Name)
			if err != nil {
				err = msgp.WrapError(err, zb0004, "Name")
				return
			}
			// write "mode"
			err = en.Append(0xa4, 0x6d, 0x6f, 0x64, 0x65)
			if err != nil {
				return
			}
			err = en.WriteUint32(z[zb0004].Mode)
			if err != nil {
				err = msgp.WrapError(err, zb0004, "Mode")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ReadDirEntries) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0004 := range z {
		if z[zb0004] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "name"
			o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
			o = msgp.AppendString(o, z[zb0004].Name)
			// string "mode"
			o = append(o, 0xa4, 0x6d, 0x6f, 0x64, 0x65)
			o = msgp.AppendUint32(o, z[zb0004].Mode)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReadDirEntries) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(ReadDirEntries, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(VSSDirEntry)
			}
			var field []byte
			_ = field
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
				switch msgp.UnsafeString(field) {
				case "name":
					(*z)[zb0001].Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Name")
						return
					}
				case "mode":
					(*z)[zb0001].Mode, bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Mode")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001)
						return
					}
				}
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ReadDirEntries) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0004 := range z {
		if z[zb0004] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 5 + msgp.StringPrefixSize + len(z[zb0004].Name) + 5 + msgp.Uint32Size
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReadDirReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "path":
			z.Path, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ReadDirReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "path"
	err = en.Append(0x81, 0xa4, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ReadDirReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "path"
	o = append(o, 0x81, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReadDirReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ReadDirReq) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Path)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReadReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "handleID":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "HandleID")
					return
				}
				z.HandleID = FileHandleId(zb0002)
			}
		case "length":
			z.Length, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Length")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ReadReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "handleID"
	err = en.Append(0x82, 0xa8, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.HandleID))
	if err != nil {
		err = msgp.WrapError(err, "HandleID")
		return
	}
	// write "length"
	err = en.Append(0xa6, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Length)
	if err != nil {
		err = msgp.WrapError(err, "Length")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ReadReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "handleID"
	o = append(o, 0x82, 0xa8, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x44)
	o = msgp.AppendString(o, string(z.HandleID))
	// string "length"
	o = append(o, 0xa6, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	o = msgp.AppendInt(o, z.Length)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReadReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "handleID":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HandleID")
					return
				}
				z.HandleID = FileHandleId(zb0002)
			}
		case "length":
			z.Length, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Length")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ReadReq) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(string(z.HandleID)) + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StatFS) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Bsize":
			z.Bsize, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Bsize")
				return
			}
		case "Blocks":
			z.Blocks, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Blocks")
				return
			}
		case "Bfree":
			z.Bfree, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Bfree")
				return
			}
		case "Bavail":
			z.Bavail, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Bavail")
				return
			}
		case "Files":
			z.Files, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
		case "Ffree":
			z.Ffree, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Ffree")
				return
			}
		case "NameLen":
			z.NameLen, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "NameLen")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StatFS) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Bsize"
	err = en.Append(0x87, 0xa5, 0x42, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Bsize)
	if err != nil {
		err = msgp.WrapError(err, "Bsize")
		return
	}
	// write "Blocks"
	err = en.Append(0xa6, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Blocks)
	if err != nil {
		err = msgp.WrapError(err, "Blocks")
		return
	}
	// write "Bfree"
	err = en.Append(0xa5, 0x42, 0x66, 0x72, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Bfree)
	if err != nil {
		err = msgp.WrapError(err, "Bfree")
		return
	}
	// write "Bavail"
	err = en.Append(0xa6, 0x42, 0x61, 0x76, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Bavail)
	if err != nil {
		err = msgp.WrapError(err, "Bavail")
		return
	}
	// write "Files"
	err = en.Append(0xa5, 0x46, 0x69, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Files)
	if err != nil {
		err = msgp.WrapError(err, "Files")
		return
	}
	// write "Ffree"
	err = en.Append(0xa5, 0x46, 0x66, 0x72, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Ffree)
	if err != nil {
		err = msgp.WrapError(err, "Ffree")
		return
	}
	// write "NameLen"
	err = en.Append(0xa7, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.NameLen)
	if err != nil {
		err = msgp.WrapError(err, "NameLen")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StatFS) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Bsize"
	o = append(o, 0x87, 0xa5, 0x42, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendUint64(o, z.Bsize)
	// string "Blocks"
	o = append(o, 0xa6, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73)
	o = msgp.AppendUint64(o, z.Blocks)
	// string "Bfree"
	o = append(o, 0xa5, 0x42, 0x66, 0x72, 0x65, 0x65)
	o = msgp.AppendUint64(o, z.Bfree)
	// string "Bavail"
	o = append(o, 0xa6, 0x42, 0x61, 0x76, 0x61, 0x69, 0x6c)
	o = msgp.AppendUint64(o, z.Bavail)
	// string "Files"
	o = append(o, 0xa5, 0x46, 0x69, 0x6c, 0x65, 0x73)
	o = msgp.AppendUint64(o, z.Files)
	// string "Ffree"
	o = append(o, 0xa5, 0x46, 0x66, 0x72, 0x65, 0x65)
	o = msgp.AppendUint64(o, z.Ffree)
	// string "NameLen"
	o = append(o, 0xa7, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e)
	o = msgp.AppendUint64(o, z.NameLen)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StatFS) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Bsize":
			z.Bsize, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bsize")
				return
			}
		case "Blocks":
			z.Blocks, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Blocks")
				return
			}
		case "Bfree":
			z.Bfree, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bfree")
				return
			}
		case "Bavail":
			z.Bavail, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bavail")
				return
			}
		case "Files":
			z.Files, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
		case "Ffree":
			z.Ffree, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ffree")
				return
			}
		case "NameLen":
			z.NameLen, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NameLen")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StatFS) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint64Size + 7 + msgp.Uint64Size + 6 + msgp.Uint64Size + 7 + msgp.Uint64Size + 6 + msgp.Uint64Size + 6 + msgp.Uint64Size + 8 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StatReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "path":
			z.Path, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StatReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "path"
	err = en.Append(0x81, 0xa4, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StatReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "path"
	o = append(o, 0x81, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StatReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StatReq) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Path)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *VSSDirEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "mode":
			z.Mode, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z VSSDirEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "name"
	err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "mode"
	err = en.Append(0xa4, 0x6d, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Mode)
	if err != nil {
		err = msgp.WrapError(err, "Mode")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z VSSDirEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "name"
	o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "mode"
	o = append(o, 0xa4, 0x6d, 0x6f, 0x64, 0x65)
	o = msgp.AppendUint32(o, z.Mode)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VSSDirEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "mode":
			z.Mode, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z VSSDirEntry) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 5 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *VSSFileInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "mode":
			z.Mode, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		case "modTime":
			z.ModTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "ModTime")
				return
			}
		case "isDir":
			z.IsDir, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsDir")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *VSSFileInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "name"
	err = en.Append(0x85, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "size"
	err = en.Append(0xa4, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "mode"
	err = en.Append(0xa4, 0x6d, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Mode)
	if err != nil {
		err = msgp.WrapError(err, "Mode")
		return
	}
	// write "modTime"
	err = en.Append(0xa7, 0x6d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.ModTime)
	if err != nil {
		err = msgp.WrapError(err, "ModTime")
		return
	}
	// write "isDir"
	err = en.Append(0xa5, 0x69, 0x73, 0x44, 0x69, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsDir)
	if err != nil {
		err = msgp.WrapError(err, "IsDir")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *VSSFileInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "name"
	o = append(o, 0x85, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "size"
	o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Size)
	// string "mode"
	o = append(o, 0xa4, 0x6d, 0x6f, 0x64, 0x65)
	o = msgp.AppendUint32(o, z.Mode)
	// string "modTime"
	o = append(o, 0xa7, 0x6d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.ModTime)
	// string "isDir"
	o = append(o, 0xa5, 0x69, 0x73, 0x44, 0x69, 0x72)
	o = msgp.AppendBool(o, z.IsDir)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VSSFileInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "mode":
			z.Mode, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		case "modTime":
			z.ModTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ModTime")
				return
			}
		case "isDir":
			z.IsDir, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsDir")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VSSFileInfo) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 5 + msgp.Int64Size + 5 + msgp.Uint32Size + 8 + msgp.TimeSize + 6 + msgp.BoolSize
	return
}
